events {}

http {
    upstream service1 {
        server service1:3001;
    }

    upstream service2 {
        server service2:3002;
    }

    server {
        listen 8080;

        # Route for Service 1
        location /service1 {
            proxy_pass http://service1;
        }

        # Route for Service 2 (socket io support)
        location /service2 {
            proxy_pass http://service2;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }
    }
}





# Define the number of worker processes (tune this based on your system)
# worker_processes 1;
#
# events {
#     worker_connections 1024;
# }
#
# http {
#     # Upstream definitions for microservices
#     upstream api_service {
#         server service1:3001;
#     }
#
#     upstream socket_service {
#         server service2:3002;
#     }
#
#     # Map to handle connection upgrade for WebSockets
#     map $http_upgrade $connection_upgrade {
#         default upgrade;
#         ''      close;
#     }
#
#     # Main server block
#     server {
#         listen 8080;
#         server_name dingdong;
#
#         # Route API requests to the Express service
#         location /service1/ {
#             proxy_pass http://service1;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#
#         # Route Socket.IO connections (websockets) to the socket server
#         location /service2/ {
#             proxy_pass http://service2;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;
#         }
#
#         # Optionally, you can add other locations or a default fallback
#         location / {
#             return 404;
#         }
#     }
# }
